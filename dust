   // ================================================================ //
     // 水戸市の境界線の座標の取得
     // ================================================================ //
     /*$.ajax(
     "city/mito/mito.geojson", {
     type: 'POST',
     dataType: 'geojson',
     success: function (json1) {
     var p_points = [];
     for (var j = 0; j < json1['geo'].length; j++) {
     p_points.push(new OpenLayers.Geometry.Point(json1['geo'][j].x, json1['geo'][j].y)
     .transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject()));
     }
     setMapLine(map, vectorLayer, p_points);
     },
     error: function (json1) {
     alert('failed');
     }

     }
     );*/

     function setMapLine(map, layer, polygon_points) {
         //線のプロパティ
         var style_polygon = {
             strokeColor: "#1E90FF",
             fillOpacity: 0,
             strokeWidth: 3
         };

         //ここで水戸市を線で囲んでいる
         // TODO: 動きをよく理解する。
         var mito_polygon = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Polygon(new OpenLayers.Geometry.LinearRing(polygon_points)), null, style_polygon);
         layer.addFeatures([mito_polygon]);
         map.addLayer(layer);

     }







     /**popupを使って地図上に表示する**/
     popup = new OpenLayers.Popup.FramedCloud("featurePopup", feature.geometry.getBounds().getCenterLonLat(), new OpenLayers.Size(100, 100), table, null, true, onPopupClose);
         feature.popup = popup;
         //popup.feature = feature;
         //map.addPopup(popup, true);
         //var parent_object = document.getElementById("info");
         //parent_object.appendChild(table);
         //htmlにコードを追加
         //popup.feature = null;
                 //map.removePopup(feature.popup);
                 //feature.popup.destroy();
                 //feature.popup = null;

     function onPopupClose(evt) {
         // 'this' is the popup.
         var feature = this.feature;
         if (feature.layer) {// The feature is not destroyed
             selectControl.unselect(feature);
         } else {// After "moveend" or "refresh" events on POIs layer all
             //     features have been destroyed by the Strategy.BBOX
             this.destroy();
         }
     }



         var style_point = {
             strokeColor: "#FF6347",
             fillColor: "#FF6347",
             fillOpacity: 1,    // 内側の透明度
             strokeWidth: 2, // 外周の太さ
             pointRadius: 3  // 半径
         };

     // ================================================================ //
         // 水戸市の市町村の座標の取得
         // ================================================================ //
         $.ajax(
             "http://geoapi.heartrails.com/api/json?method=getTowns&city=%E6%B0%B4%E6%88%B8%E5%B8%82", {
                 type: 'POST',
                 dataType: 'jsonp',
                 success: function (json) {
                     var len = json['response']['location'].length;
                     var point = [];
                     for (var i = 0; i < len; i++) {
                         // 点の座標を決める
                         point[i] = new OpenLayers.Geometry.Point(json['response']['location'][i].x, json['response']['location'][i].y);

                         // 座標を変換 ※この処理が新たに必要だった
                         point[i].transform(
                             new OpenLayers.Projection("EPSG:4326"),
                             new OpenLayers.Projection("EPSG:900913")
                             //map.getProjectionObject()
                         );

                         // 点を生成
                         var pointFeature = new OpenLayers.Feature.Vector(point[i], null, style_point);

                         // レイヤの追加と描画する図の指定
                         vectorLayer.addFeatures([pointFeature]);
                         //map.addLayer(vectorLayer);
                     }
                 }
             }
         );

         <div id="map" style="width:1230px; height:760px; border: 1px solid #000000; box-shadow: #1a1a1a"></div>

         <img src="../sozai/nebaru.jpg" style="height: 350px; width: 350px; opacity: 0.5">

         //csvファイルを読み込む
             /*createArrayFromCSV(url, function (result) {
                 var len = result.length;
                 var con = result[0].length;
                 var point = new Array();
                 console.log(result);
                 //点の座標を変換する
                 for (var i = 0; i < len; i++) {
                     // 点の座標を決める
                     point[i] = new OpenLayers.Geometry.Point(result[i][con-1], result[i][con-2]);
                     // 座標を変換 ※この処理が新たに必要だった
                     point[i].transform(
                         new OpenLayers.Projection("EPSG:4326"),
                         new OpenLayers.Projection("EPSG:900913")
                         //map.getProjectionObject()
                     );
                     //console.log(point[i]);
                     //オブジェクトの作成
                     var object = new Object;
                     object.name = result[i][1];
                     object.address = result[i][2];
                     if(object_number == 3){
                         object.other = result[i][3];
                     }
                     // 点を生成
                     var pointFeature = new OpenLayers.Feature.Vector(point[i], object);
                     //レイヤーに追加
                     addVector.styleMap = style;
                     addVector.addFeatures([pointFeature]);
                 }
                 //地図上に表示
                 map.addLayer(addVector);
             })*/



             //=====================================================//
             //CSVファイルを読み込む関数
             //=====================================================//
             function createArrayFromCSV(url, callback) {
                 var xhr = new XMLHttpRequest();
                 //通信の設定　第3引数trueは非同期を表す
                 xhr.open("get", url, true);
                 xhr.send(null);
                 //通信が成功した際に実行される関数
                 xhr.onload = function () {
                     //結果を入れる連想配列
                     var result = new Array();
                     //csvファイルを一行ごとに分ける
                     var csv = xhr.responseText.split("\n");
                     for (var i = 0; i < csv.length; i++) {
                         //今度はカンマごとに分けて代入していく
                         result[i] = csv[i].split(",");
                     }
                     //出来た連想配列をコールバック関数に返す
                     callback(result);
                 };
             };


$("input.submit").click(function () {
        var CsvFile = document.getElementById("#CSV_file");
        console.log("2");
        var file = evt.target.files;

        var reade
    });



// ====================
// サブメニューのJQuery
// ====================
/*$(function () {
 $('#menu li').mouseover(function () {
 //$("line", "#menu").animate({
 //'width': $("#menu").width(),
 //'left': $("#menu").position().left
 //}
 //, 'fast');
 $(this).animate({},5000,'swing',function(){
 $(this).css({
 'border-bottom': '1px solid #000000'
 })
 });
 });
 });*/

/*$(function () {
 $('#menu li').hover(function () {
 $("ul:not(:animated)", this).slideDown();
 }, function () {
 $("ul.child", this).slideUp();
 });
 });*/


//研究室データベースアクセス用
<?php
$mapdata = $_POST["mapdata"];


$db = mysqli_connect('153.126.137.149', 'root', 'C(SPtL#KJq', 'Koike_OpendataDB') or //データベースに接続
die(mysqli_connect_error());
mysqli_set_charset($db, 'utf8');  //文字コードの指定
//データベースからデータを取ってくる




#fffede #ffdf8e #fff

#d0f9e4 #009944


//緊急時のメニューボタンのグラデーションcss
background: linear-gradient(to bottom, #f5ba00, #f5aa00);
//そのホバー

//平常時のメニューボタンのグラデーションcss
background: linear-gradient(to bottom, #00b964, #009944);
//そのホバー
 background: linear-gradient(to bottom, #008934, #006914);